/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen;


import jhi.fab.codegen.tables.Outbreaks;
import jhi.fab.codegen.tables.Severities;
import jhi.fab.codegen.tables.Sources;
import jhi.fab.codegen.tables.SsrGenotypes;
import jhi.fab.codegen.tables.Subsamples;
import jhi.fab.codegen.tables.UserSessions;
import jhi.fab.codegen.tables.Users;
import jhi.fab.codegen.tables.Varieties;
import jhi.fab.codegen.tables.records.OutbreaksRecord;
import jhi.fab.codegen.tables.records.SeveritiesRecord;
import jhi.fab.codegen.tables.records.SourcesRecord;
import jhi.fab.codegen.tables.records.SsrGenotypesRecord;
import jhi.fab.codegen.tables.records.SubsamplesRecord;
import jhi.fab.codegen.tables.records.UserSessionsRecord;
import jhi.fab.codegen.tables.records.UsersRecord;
import jhi.fab.codegen.tables.records.VarietiesRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in fab.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<OutbreaksRecord> KEY_OUTBREAKS_PRIMARY = Internal.createUniqueKey(Outbreaks.OUTBREAKS, DSL.name("KEY_outbreaks_PRIMARY"), new TableField[] { Outbreaks.OUTBREAKS.OUTBREAK_ID }, true);
    public static final UniqueKey<SeveritiesRecord> KEY_SEVERITIES_PRIMARY = Internal.createUniqueKey(Severities.SEVERITIES, DSL.name("KEY_severities_PRIMARY"), new TableField[] { Severities.SEVERITIES.SEVERITY_ID }, true);
    public static final UniqueKey<SourcesRecord> KEY_SOURCES_PRIMARY = Internal.createUniqueKey(Sources.SOURCES, DSL.name("KEY_sources_PRIMARY"), new TableField[] { Sources.SOURCES.SOURCE_ID }, true);
    public static final UniqueKey<SsrGenotypesRecord> KEY_SSR_GENOTYPES_PRIMARY = Internal.createUniqueKey(SsrGenotypes.SSR_GENOTYPES, DSL.name("KEY_ssr_genotypes_PRIMARY"), new TableField[] { SsrGenotypes.SSR_GENOTYPES.GENOTYPE_ID }, true);
    public static final UniqueKey<SubsamplesRecord> KEY_SUBSAMPLES_PRIMARY = Internal.createUniqueKey(Subsamples.SUBSAMPLES, DSL.name("KEY_subsamples_PRIMARY"), new TableField[] { Subsamples.SUBSAMPLES.SUBSAMPLE_ID }, true);
    public static final UniqueKey<UserSessionsRecord> KEY_USER_SESSIONS_PRIMARY = Internal.createUniqueKey(UserSessions.USER_SESSIONS, DSL.name("KEY_user_sessions_PRIMARY"), new TableField[] { UserSessions.USER_SESSIONS.USER_ID, UserSessions.USER_SESSIONS.TOKEN }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.USER_ID }, true);
    public static final UniqueKey<VarietiesRecord> KEY_VARIETIES_PRIMARY = Internal.createUniqueKey(Varieties.VARIETIES, DSL.name("KEY_varieties_PRIMARY"), new TableField[] { Varieties.VARIETIES.VARIETY_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<OutbreaksRecord, VarietiesRecord> OUTBREAKS_IBFK_1 = Internal.createForeignKey(Outbreaks.OUTBREAKS, DSL.name("outbreaks_ibfk_1"), new TableField[] { Outbreaks.OUTBREAKS.VARIETY_ID }, Keys.KEY_VARIETIES_PRIMARY, new TableField[] { Varieties.VARIETIES.VARIETY_ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
    public static final ForeignKey<OutbreaksRecord, SeveritiesRecord> OUTBREAKS_IBFK_2 = Internal.createForeignKey(Outbreaks.OUTBREAKS, DSL.name("outbreaks_ibfk_2"), new TableField[] { Outbreaks.OUTBREAKS.SEVERITY_ID }, Keys.KEY_SEVERITIES_PRIMARY, new TableField[] { Severities.SEVERITIES.SEVERITY_ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
    public static final ForeignKey<OutbreaksRecord, SourcesRecord> OUTBREAKS_IBFK_3 = Internal.createForeignKey(Outbreaks.OUTBREAKS, DSL.name("outbreaks_ibfk_3"), new TableField[] { Outbreaks.OUTBREAKS.SOURCE_ID }, Keys.KEY_SOURCES_PRIMARY, new TableField[] { Sources.SOURCES.SOURCE_ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
    public static final ForeignKey<OutbreaksRecord, UsersRecord> OUTBREAKS_IBFK_4 = Internal.createForeignKey(Outbreaks.OUTBREAKS, DSL.name("outbreaks_ibfk_4"), new TableField[] { Outbreaks.OUTBREAKS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USER_ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
    public static final ForeignKey<SubsamplesRecord, SsrGenotypesRecord> SUBSAMPLES_IBFK_1 = Internal.createForeignKey(Subsamples.SUBSAMPLES, DSL.name("subsamples_ibfk_1"), new TableField[] { Subsamples.SUBSAMPLES.GENOTYPE_ID }, Keys.KEY_SSR_GENOTYPES_PRIMARY, new TableField[] { SsrGenotypes.SSR_GENOTYPES.GENOTYPE_ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
    public static final ForeignKey<SubsamplesRecord, OutbreaksRecord> SUBSAMPLES_IBFK_2 = Internal.createForeignKey(Subsamples.SUBSAMPLES, DSL.name("subsamples_ibfk_2"), new TableField[] { Subsamples.SUBSAMPLES.OUTBREAK_ID }, Keys.KEY_OUTBREAKS_PRIMARY, new TableField[] { Outbreaks.OUTBREAKS.OUTBREAK_ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
    public static final ForeignKey<UserSessionsRecord, UsersRecord> USER_SESSIONS_IBFK_1 = Internal.createForeignKey(UserSessions.USER_SESSIONS, DSL.name("user_sessions_ibfk_1"), new TableField[] { UserSessions.USER_SESSIONS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USER_ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
}
