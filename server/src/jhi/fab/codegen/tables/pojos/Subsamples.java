/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables.pojos;


import java.io.Serializable;
import java.time.LocalDate;

import jhi.fab.codegen.enums.SubsamplesMatingType;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Subsamples implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer subsampleId;
    private String subsampleCode;
    private Integer outbreakId;
    private Integer genotypeId;
    private Integer varietyId;
    private String material;
    private LocalDate dateGenotyped;
    private String userComments;
    private String adminComments;
    private Boolean myceliaPellet;
    private Boolean cultureSlope;
    private SubsamplesMatingType matingType;

    public Subsamples() {}

    public Subsamples(Subsamples value) {
        this.subsampleId = value.subsampleId;
        this.subsampleCode = value.subsampleCode;
        this.outbreakId = value.outbreakId;
        this.genotypeId = value.genotypeId;
        this.varietyId = value.varietyId;
        this.material = value.material;
        this.dateGenotyped = value.dateGenotyped;
        this.userComments = value.userComments;
        this.adminComments = value.adminComments;
        this.myceliaPellet = value.myceliaPellet;
        this.cultureSlope = value.cultureSlope;
        this.matingType = value.matingType;
    }

    public Subsamples(
        Integer subsampleId,
        String subsampleCode,
        Integer outbreakId,
        Integer genotypeId,
        Integer varietyId,
        String material,
        LocalDate dateGenotyped,
        String userComments,
        String adminComments,
        Boolean myceliaPellet,
        Boolean cultureSlope,
        SubsamplesMatingType matingType
    ) {
        this.subsampleId = subsampleId;
        this.subsampleCode = subsampleCode;
        this.outbreakId = outbreakId;
        this.genotypeId = genotypeId;
        this.varietyId = varietyId;
        this.material = material;
        this.dateGenotyped = dateGenotyped;
        this.userComments = userComments;
        this.adminComments = adminComments;
        this.myceliaPellet = myceliaPellet;
        this.cultureSlope = cultureSlope;
        this.matingType = matingType;
    }

    /**
     * Getter for <code>fab.subsamples.subsample_id</code>.
     */
    public Integer getSubsampleId() {
        return this.subsampleId;
    }

    /**
     * Setter for <code>fab.subsamples.subsample_id</code>.
     */
    public void setSubsampleId(Integer subsampleId) {
        this.subsampleId = subsampleId;
    }

    /**
     * Getter for <code>fab.subsamples.subsample_code</code>.
     */
    public String getSubsampleCode() {
        return this.subsampleCode;
    }

    /**
     * Setter for <code>fab.subsamples.subsample_code</code>.
     */
    public void setSubsampleCode(String subsampleCode) {
        this.subsampleCode = subsampleCode;
    }

    /**
     * Getter for <code>fab.subsamples.outbreak_id</code>.
     */
    public Integer getOutbreakId() {
        return this.outbreakId;
    }

    /**
     * Setter for <code>fab.subsamples.outbreak_id</code>.
     */
    public void setOutbreakId(Integer outbreakId) {
        this.outbreakId = outbreakId;
    }

    /**
     * Getter for <code>fab.subsamples.genotype_id</code>.
     */
    public Integer getGenotypeId() {
        return this.genotypeId;
    }

    /**
     * Setter for <code>fab.subsamples.genotype_id</code>.
     */
    public void setGenotypeId(Integer genotypeId) {
        this.genotypeId = genotypeId;
    }

    /**
     * Getter for <code>fab.subsamples.variety_id</code>.
     */
    public Integer getVarietyId() {
        return this.varietyId;
    }

    /**
     * Setter for <code>fab.subsamples.variety_id</code>.
     */
    public void setVarietyId(Integer varietyId) {
        this.varietyId = varietyId;
    }

    /**
     * Getter for <code>fab.subsamples.material</code>.
     */
    public String getMaterial() {
        return this.material;
    }

    /**
     * Setter for <code>fab.subsamples.material</code>.
     */
    public void setMaterial(String material) {
        this.material = material;
    }

    /**
     * Getter for <code>fab.subsamples.date_genotyped</code>.
     */
    public LocalDate getDateGenotyped() {
        return this.dateGenotyped;
    }

    /**
     * Setter for <code>fab.subsamples.date_genotyped</code>.
     */
    public void setDateGenotyped(LocalDate dateGenotyped) {
        this.dateGenotyped = dateGenotyped;
    }

    /**
     * Getter for <code>fab.subsamples.user_comments</code>.
     */
    public String getUserComments() {
        return this.userComments;
    }

    /**
     * Setter for <code>fab.subsamples.user_comments</code>.
     */
    public void setUserComments(String userComments) {
        this.userComments = userComments;
    }

    /**
     * Getter for <code>fab.subsamples.admin_comments</code>.
     */
    public String getAdminComments() {
        return this.adminComments;
    }

    /**
     * Setter for <code>fab.subsamples.admin_comments</code>.
     */
    public void setAdminComments(String adminComments) {
        this.adminComments = adminComments;
    }

    /**
     * Getter for <code>fab.subsamples.mycelia_pellet</code>.
     */
    public Boolean getMyceliaPellet() {
        return this.myceliaPellet;
    }

    /**
     * Setter for <code>fab.subsamples.mycelia_pellet</code>.
     */
    public void setMyceliaPellet(Boolean myceliaPellet) {
        this.myceliaPellet = myceliaPellet;
    }

    /**
     * Getter for <code>fab.subsamples.culture_slope</code>.
     */
    public Boolean getCultureSlope() {
        return this.cultureSlope;
    }

    /**
     * Setter for <code>fab.subsamples.culture_slope</code>.
     */
    public void setCultureSlope(Boolean cultureSlope) {
        this.cultureSlope = cultureSlope;
    }

    /**
     * Getter for <code>fab.subsamples.mating_type</code>.
     */
    public SubsamplesMatingType getMatingType() {
        return this.matingType;
    }

    /**
     * Setter for <code>fab.subsamples.mating_type</code>.
     */
    public void setMatingType(SubsamplesMatingType matingType) {
        this.matingType = matingType;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Subsamples other = (Subsamples) obj;
        if (this.subsampleId == null) {
            if (other.subsampleId != null)
                return false;
        }
        else if (!this.subsampleId.equals(other.subsampleId))
            return false;
        if (this.subsampleCode == null) {
            if (other.subsampleCode != null)
                return false;
        }
        else if (!this.subsampleCode.equals(other.subsampleCode))
            return false;
        if (this.outbreakId == null) {
            if (other.outbreakId != null)
                return false;
        }
        else if (!this.outbreakId.equals(other.outbreakId))
            return false;
        if (this.genotypeId == null) {
            if (other.genotypeId != null)
                return false;
        }
        else if (!this.genotypeId.equals(other.genotypeId))
            return false;
        if (this.varietyId == null) {
            if (other.varietyId != null)
                return false;
        }
        else if (!this.varietyId.equals(other.varietyId))
            return false;
        if (this.material == null) {
            if (other.material != null)
                return false;
        }
        else if (!this.material.equals(other.material))
            return false;
        if (this.dateGenotyped == null) {
            if (other.dateGenotyped != null)
                return false;
        }
        else if (!this.dateGenotyped.equals(other.dateGenotyped))
            return false;
        if (this.userComments == null) {
            if (other.userComments != null)
                return false;
        }
        else if (!this.userComments.equals(other.userComments))
            return false;
        if (this.adminComments == null) {
            if (other.adminComments != null)
                return false;
        }
        else if (!this.adminComments.equals(other.adminComments))
            return false;
        if (this.myceliaPellet == null) {
            if (other.myceliaPellet != null)
                return false;
        }
        else if (!this.myceliaPellet.equals(other.myceliaPellet))
            return false;
        if (this.cultureSlope == null) {
            if (other.cultureSlope != null)
                return false;
        }
        else if (!this.cultureSlope.equals(other.cultureSlope))
            return false;
        if (this.matingType == null) {
            if (other.matingType != null)
                return false;
        }
        else if (!this.matingType.equals(other.matingType))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.subsampleId == null) ? 0 : this.subsampleId.hashCode());
        result = prime * result + ((this.subsampleCode == null) ? 0 : this.subsampleCode.hashCode());
        result = prime * result + ((this.outbreakId == null) ? 0 : this.outbreakId.hashCode());
        result = prime * result + ((this.genotypeId == null) ? 0 : this.genotypeId.hashCode());
        result = prime * result + ((this.varietyId == null) ? 0 : this.varietyId.hashCode());
        result = prime * result + ((this.material == null) ? 0 : this.material.hashCode());
        result = prime * result + ((this.dateGenotyped == null) ? 0 : this.dateGenotyped.hashCode());
        result = prime * result + ((this.userComments == null) ? 0 : this.userComments.hashCode());
        result = prime * result + ((this.adminComments == null) ? 0 : this.adminComments.hashCode());
        result = prime * result + ((this.myceliaPellet == null) ? 0 : this.myceliaPellet.hashCode());
        result = prime * result + ((this.cultureSlope == null) ? 0 : this.cultureSlope.hashCode());
        result = prime * result + ((this.matingType == null) ? 0 : this.matingType.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Subsamples (");

        sb.append(subsampleId);
        sb.append(", ").append(subsampleCode);
        sb.append(", ").append(outbreakId);
        sb.append(", ").append(genotypeId);
        sb.append(", ").append(varietyId);
        sb.append(", ").append(material);
        sb.append(", ").append(dateGenotyped);
        sb.append(", ").append(userComments);
        sb.append(", ").append(adminComments);
        sb.append(", ").append(myceliaPellet);
        sb.append(", ").append(cultureSlope);
        sb.append(", ").append(matingType);

        sb.append(")");
        return sb.toString();
    }
}
