/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.util.Collection;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.tables.Outbreaks.OutbreaksPath;
import jhi.fab.codegen.tables.records.SourcesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Sources extends TableImpl<SourcesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.sources</code>
     */
    public static final Sources SOURCES = new Sources();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourcesRecord> getRecordType() {
        return SourcesRecord.class;
    }

    /**
     * The column <code>fab.sources.source_id</code>.
     */
    public final TableField<SourcesRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fab.sources.source_name</code>.
     */
    public final TableField<SourcesRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Sources(Name alias, Table<SourcesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sources(Name alias, Table<SourcesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.sources</code> table reference
     */
    public Sources(String alias) {
        this(DSL.name(alias), SOURCES);
    }

    /**
     * Create an aliased <code>fab.sources</code> table reference
     */
    public Sources(Name alias) {
        this(alias, SOURCES);
    }

    /**
     * Create a <code>fab.sources</code> table reference
     */
    public Sources() {
        this(DSL.name("sources"), null);
    }

    public <O extends Record> Sources(Table<O> path, ForeignKey<O, SourcesRecord> childPath, InverseForeignKey<O, SourcesRecord> parentPath) {
        super(path, childPath, parentPath, SOURCES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SourcesPath extends Sources implements Path<SourcesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SourcesPath(Table<O> path, ForeignKey<O, SourcesRecord> childPath, InverseForeignKey<O, SourcesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SourcesPath(Name alias, Table<SourcesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SourcesPath as(String alias) {
            return new SourcesPath(DSL.name(alias), this);
        }

        @Override
        public SourcesPath as(Name alias) {
            return new SourcesPath(alias, this);
        }

        @Override
        public SourcesPath as(Table<?> alias) {
            return new SourcesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public Identity<SourcesRecord, Integer> getIdentity() {
        return (Identity<SourcesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SourcesRecord> getPrimaryKey() {
        return Keys.KEY_SOURCES_PRIMARY;
    }

    private transient OutbreaksPath _outbreaks;

    /**
     * Get the implicit to-many join path to the <code>fab.outbreaks</code>
     * table
     */
    public OutbreaksPath outbreaks() {
        if (_outbreaks == null)
            _outbreaks = new OutbreaksPath(this, null, Keys.SOURCE.getInverseKey());

        return _outbreaks;
    }

    @Override
    public Sources as(String alias) {
        return new Sources(DSL.name(alias), this);
    }

    @Override
    public Sources as(Name alias) {
        return new Sources(alias, this);
    }

    @Override
    public Sources as(Table<?> alias) {
        return new Sources(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(String name) {
        return new Sources(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(Name name) {
        return new Sources(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(Table<?> name) {
        return new Sources(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sources where(Condition condition) {
        return new Sources(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sources where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sources where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sources where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sources where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sources where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sources where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sources where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sources whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sources whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
