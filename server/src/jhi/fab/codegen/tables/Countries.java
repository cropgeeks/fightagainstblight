/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.util.Collection;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.tables.Nuts.NutsPath;
import jhi.fab.codegen.tables.records.CountriesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Countries extends TableImpl<CountriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.countries</code>
     */
    public static final Countries COUNTRIES = new Countries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountriesRecord> getRecordType() {
        return CountriesRecord.class;
    }

    /**
     * The column <code>fab.countries.country_id</code>.
     */
    public final TableField<CountriesRecord, Integer> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fab.countries.name</code>.
     */
    public final TableField<CountriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private Countries(Name alias, Table<CountriesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.countries</code> table reference
     */
    public Countries(String alias) {
        this(DSL.name(alias), COUNTRIES);
    }

    /**
     * Create an aliased <code>fab.countries</code> table reference
     */
    public Countries(Name alias) {
        this(alias, COUNTRIES);
    }

    /**
     * Create a <code>fab.countries</code> table reference
     */
    public Countries() {
        this(DSL.name("countries"), null);
    }

    public <O extends Record> Countries(Table<O> path, ForeignKey<O, CountriesRecord> childPath, InverseForeignKey<O, CountriesRecord> parentPath) {
        super(path, childPath, parentPath, COUNTRIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CountriesPath extends Countries implements Path<CountriesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CountriesPath(Table<O> path, ForeignKey<O, CountriesRecord> childPath, InverseForeignKey<O, CountriesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CountriesPath(Name alias, Table<CountriesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CountriesPath as(String alias) {
            return new CountriesPath(DSL.name(alias), this);
        }

        @Override
        public CountriesPath as(Name alias) {
            return new CountriesPath(alias, this);
        }

        @Override
        public CountriesPath as(Table<?> alias) {
            return new CountriesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public UniqueKey<CountriesRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRIES_PRIMARY;
    }

    private transient NutsPath _nuts;

    /**
     * Get the implicit to-many join path to the <code>fab.nuts</code> table
     */
    public NutsPath nuts() {
        if (_nuts == null)
            _nuts = new NutsPath(this, null, Keys.COUNTRY.getInverseKey());

        return _nuts;
    }

    @Override
    public Countries as(String alias) {
        return new Countries(DSL.name(alias), this);
    }

    @Override
    public Countries as(Name alias) {
        return new Countries(alias, this);
    }

    @Override
    public Countries as(Table<?> alias) {
        return new Countries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(String name) {
        return new Countries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Name name) {
        return new Countries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Table<?> name) {
        return new Countries(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Countries where(Condition condition) {
        return new Countries(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Countries where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Countries where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Countries where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Countries where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Countries where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Countries where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Countries where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Countries whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Countries whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
