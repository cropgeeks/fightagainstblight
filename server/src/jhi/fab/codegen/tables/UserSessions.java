/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.tables.Users.UsersPath;
import jhi.fab.codegen.tables.records.UserSessionsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserSessions extends TableImpl<UserSessionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.user_sessions</code>
     */
    public static final UserSessions USER_SESSIONS = new UserSessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSessionsRecord> getRecordType() {
        return UserSessionsRecord.class;
    }

    /**
     * The column <code>fab.user_sessions.user_id</code>.
     */
    public final TableField<UserSessionsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fab.user_sessions.token</code>.
     */
    public final TableField<UserSessionsRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>fab.user_sessions.created_on</code>.
     */
    public final TableField<UserSessionsRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private UserSessions(Name alias, Table<UserSessionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserSessions(Name alias, Table<UserSessionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.user_sessions</code> table reference
     */
    public UserSessions(String alias) {
        this(DSL.name(alias), USER_SESSIONS);
    }

    /**
     * Create an aliased <code>fab.user_sessions</code> table reference
     */
    public UserSessions(Name alias) {
        this(alias, USER_SESSIONS);
    }

    /**
     * Create a <code>fab.user_sessions</code> table reference
     */
    public UserSessions() {
        this(DSL.name("user_sessions"), null);
    }

    public <O extends Record> UserSessions(Table<O> path, ForeignKey<O, UserSessionsRecord> childPath, InverseForeignKey<O, UserSessionsRecord> parentPath) {
        super(path, childPath, parentPath, USER_SESSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserSessionsPath extends UserSessions implements Path<UserSessionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserSessionsPath(Table<O> path, ForeignKey<O, UserSessionsRecord> childPath, InverseForeignKey<O, UserSessionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserSessionsPath(Name alias, Table<UserSessionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserSessionsPath as(String alias) {
            return new UserSessionsPath(DSL.name(alias), this);
        }

        @Override
        public UserSessionsPath as(Name alias) {
            return new UserSessionsPath(alias, this);
        }

        @Override
        public UserSessionsPath as(Table<?> alias) {
            return new UserSessionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public UniqueKey<UserSessionsRecord> getPrimaryKey() {
        return Keys.KEY_USER_SESSIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserSessionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_SESSIONS_IBFK_1);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>fab.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USER_SESSIONS_IBFK_1, null);

        return _users;
    }

    @Override
    public UserSessions as(String alias) {
        return new UserSessions(DSL.name(alias), this);
    }

    @Override
    public UserSessions as(Name alias) {
        return new UserSessions(alias, this);
    }

    @Override
    public UserSessions as(Table<?> alias) {
        return new UserSessions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSessions rename(String name) {
        return new UserSessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSessions rename(Name name) {
        return new UserSessions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSessions rename(Table<?> name) {
        return new UserSessions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSessions where(Condition condition) {
        return new UserSessions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSessions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSessions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSessions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSessions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSessions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSessions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSessions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSessions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSessions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
