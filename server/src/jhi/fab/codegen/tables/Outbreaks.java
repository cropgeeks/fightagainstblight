/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Indexes;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.enums.OutbreaksHost;
import jhi.fab.codegen.enums.OutbreaksStatus;
import jhi.fab.codegen.tables.Severities.SeveritiesPath;
import jhi.fab.codegen.tables.Sources.SourcesPath;
import jhi.fab.codegen.tables.Subsamples.SubsamplesPath;
import jhi.fab.codegen.tables.Users.UsersPath;
import jhi.fab.codegen.tables.Varieties.VarietiesPath;
import jhi.fab.codegen.tables.records.OutbreaksRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Outbreaks extends TableImpl<OutbreaksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.outbreaks</code>
     */
    public static final Outbreaks OUTBREAKS = new Outbreaks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OutbreaksRecord> getRecordType() {
        return OutbreaksRecord.class;
    }

    /**
     * The column <code>fab.outbreaks.outbreak_id</code>.
     */
    public final TableField<OutbreaksRecord, Integer> OUTBREAK_ID = createField(DSL.name("outbreak_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fab.outbreaks.outbreak_code</code>.
     */
    public final TableField<OutbreaksRecord, String> OUTBREAK_CODE = createField(DSL.name("outbreak_code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>fab.outbreaks.user_id</code>.
     */
    public final TableField<OutbreaksRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fab.outbreaks.postcode</code>.
     */
    public final TableField<OutbreaksRecord, String> POSTCODE = createField(DSL.name("postcode"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>fab.outbreaks.outcode</code>.
     */
    public final TableField<OutbreaksRecord, String> OUTCODE = createField(DSL.name("outcode"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.outbreaks.country</code>.
     */
    public final TableField<OutbreaksRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.outbreaks.itl_nuts</code>.
     */
    public final TableField<OutbreaksRecord, String> ITL_NUTS = createField(DSL.name("itl_nuts"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.outbreaks.real_latitude</code>.
     */
    public final TableField<OutbreaksRecord, Double> REAL_LATITUDE = createField(DSL.name("real_latitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.outbreaks.real_longitude</code>.
     */
    public final TableField<OutbreaksRecord, Double> REAL_LONGITUDE = createField(DSL.name("real_longitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.outbreaks.view_latitude</code>.
     */
    public final TableField<OutbreaksRecord, Double> VIEW_LATITUDE = createField(DSL.name("view_latitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.outbreaks.view_longitude</code>.
     */
    public final TableField<OutbreaksRecord, Double> VIEW_LONGITUDE = createField(DSL.name("view_longitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.outbreaks.date_submitted</code>.
     */
    public final TableField<OutbreaksRecord, LocalDate> DATE_SUBMITTED = createField(DSL.name("date_submitted"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fab.outbreaks.date_received</code>.
     */
    public final TableField<OutbreaksRecord, LocalDate> DATE_RECEIVED = createField(DSL.name("date_received"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fab.outbreaks.host</code>.
     */
    public final TableField<OutbreaksRecord, OutbreaksHost> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(6).defaultValue(DSL.inline("potato", SQLDataType.VARCHAR)).asEnumDataType(OutbreaksHost.class), this, "");

    /**
     * The column <code>fab.outbreaks.reported_variety_id</code>.
     */
    public final TableField<OutbreaksRecord, Integer> REPORTED_VARIETY_ID = createField(DSL.name("reported_variety_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.outbreaks.severity_id</code>.
     */
    public final TableField<OutbreaksRecord, Integer> SEVERITY_ID = createField(DSL.name("severity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.outbreaks.source_id</code>.
     */
    public final TableField<OutbreaksRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.outbreaks.severity_other</code>.
     */
    public final TableField<OutbreaksRecord, String> SEVERITY_OTHER = createField(DSL.name("severity_other"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.outbreaks.source_other</code>.
     */
    public final TableField<OutbreaksRecord, String> SOURCE_OTHER = createField(DSL.name("source_other"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.outbreaks.user_comments</code>.
     */
    public final TableField<OutbreaksRecord, String> USER_COMMENTS = createField(DSL.name("user_comments"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.outbreaks.admin_comments</code>.
     */
    public final TableField<OutbreaksRecord, String> ADMIN_COMMENTS = createField(DSL.name("admin_comments"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.outbreaks.status</code>.
     */
    public final TableField<OutbreaksRecord, OutbreaksStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(9).asEnumDataType(OutbreaksStatus.class), this, "");

    /**
     * The column <code>fab.outbreaks.is_public</code>.
     */
    public final TableField<OutbreaksRecord, Boolean> IS_PUBLIC = createField(DSL.name("is_public"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private Outbreaks(Name alias, Table<OutbreaksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Outbreaks(Name alias, Table<OutbreaksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.outbreaks</code> table reference
     */
    public Outbreaks(String alias) {
        this(DSL.name(alias), OUTBREAKS);
    }

    /**
     * Create an aliased <code>fab.outbreaks</code> table reference
     */
    public Outbreaks(Name alias) {
        this(alias, OUTBREAKS);
    }

    /**
     * Create a <code>fab.outbreaks</code> table reference
     */
    public Outbreaks() {
        this(DSL.name("outbreaks"), null);
    }

    public <O extends Record> Outbreaks(Table<O> path, ForeignKey<O, OutbreaksRecord> childPath, InverseForeignKey<O, OutbreaksRecord> parentPath) {
        super(path, childPath, parentPath, OUTBREAKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OutbreaksPath extends Outbreaks implements Path<OutbreaksRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OutbreaksPath(Table<O> path, ForeignKey<O, OutbreaksRecord> childPath, InverseForeignKey<O, OutbreaksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OutbreaksPath(Name alias, Table<OutbreaksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OutbreaksPath as(String alias) {
            return new OutbreaksPath(DSL.name(alias), this);
        }

        @Override
        public OutbreaksPath as(Name alias) {
            return new OutbreaksPath(alias, this);
        }

        @Override
        public OutbreaksPath as(Table<?> alias) {
            return new OutbreaksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OUTBREAKS_OUTCODE);
    }

    @Override
    public Identity<OutbreaksRecord, Integer> getIdentity() {
        return (Identity<OutbreaksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OutbreaksRecord> getPrimaryKey() {
        return Keys.KEY_OUTBREAKS_PRIMARY;
    }

    @Override
    public List<ForeignKey<OutbreaksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPORTED_VARIETY, Keys.SEVERITY, Keys.SOURCE, Keys.USER);
    }

    private transient VarietiesPath _varieties;

    /**
     * Get the implicit join path to the <code>fab.varieties</code> table.
     */
    public VarietiesPath varieties() {
        if (_varieties == null)
            _varieties = new VarietiesPath(this, Keys.REPORTED_VARIETY, null);

        return _varieties;
    }

    private transient SeveritiesPath _severities;

    /**
     * Get the implicit join path to the <code>fab.severities</code> table.
     */
    public SeveritiesPath severities() {
        if (_severities == null)
            _severities = new SeveritiesPath(this, Keys.SEVERITY, null);

        return _severities;
    }

    private transient SourcesPath _sources;

    /**
     * Get the implicit join path to the <code>fab.sources</code> table.
     */
    public SourcesPath sources() {
        if (_sources == null)
            _sources = new SourcesPath(this, Keys.SOURCE, null);

        return _sources;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>fab.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USER, null);

        return _users;
    }

    private transient SubsamplesPath _subsamples;

    /**
     * Get the implicit to-many join path to the <code>fab.subsamples</code>
     * table
     */
    public SubsamplesPath subsamples() {
        if (_subsamples == null)
            _subsamples = new SubsamplesPath(this, null, Keys.OUTBREAKS.getInverseKey());

        return _subsamples;
    }

    @Override
    public Outbreaks as(String alias) {
        return new Outbreaks(DSL.name(alias), this);
    }

    @Override
    public Outbreaks as(Name alias) {
        return new Outbreaks(alias, this);
    }

    @Override
    public Outbreaks as(Table<?> alias) {
        return new Outbreaks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Outbreaks rename(String name) {
        return new Outbreaks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outbreaks rename(Name name) {
        return new Outbreaks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outbreaks rename(Table<?> name) {
        return new Outbreaks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbreaks where(Condition condition) {
        return new Outbreaks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbreaks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbreaks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbreaks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbreaks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbreaks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbreaks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbreaks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbreaks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbreaks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
