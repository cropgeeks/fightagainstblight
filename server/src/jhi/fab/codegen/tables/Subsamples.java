/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Indexes;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.tables.Outbreaks.OutbreaksPath;
import jhi.fab.codegen.tables.SsrGenotypes.SsrGenotypesPath;
import jhi.fab.codegen.tables.records.SubsamplesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Subsamples extends TableImpl<SubsamplesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.subsamples</code>
     */
    public static final Subsamples SUBSAMPLES = new Subsamples();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubsamplesRecord> getRecordType() {
        return SubsamplesRecord.class;
    }

    /**
     * The column <code>fab.subsamples.subsample_id</code>.
     */
    public final TableField<SubsamplesRecord, Integer> SUBSAMPLE_ID = createField(DSL.name("subsample_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fab.subsamples.outbreak_id</code>.
     */
    public final TableField<SubsamplesRecord, Integer> OUTBREAK_ID = createField(DSL.name("outbreak_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fab.subsamples.genotype_id</code>.
     */
    public final TableField<SubsamplesRecord, Integer> GENOTYPE_ID = createField(DSL.name("genotype_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fab.subsamples.dateGenotyped</code>.
     */
    public final TableField<SubsamplesRecord, LocalDate> DATEGENOTYPED = createField(DSL.name("dateGenotyped"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>fab.subsamples.comments</code>.
     */
    public final TableField<SubsamplesRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.VARCHAR(255), this, "");

    private Subsamples(Name alias, Table<SubsamplesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Subsamples(Name alias, Table<SubsamplesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.subsamples</code> table reference
     */
    public Subsamples(String alias) {
        this(DSL.name(alias), SUBSAMPLES);
    }

    /**
     * Create an aliased <code>fab.subsamples</code> table reference
     */
    public Subsamples(Name alias) {
        this(alias, SUBSAMPLES);
    }

    /**
     * Create a <code>fab.subsamples</code> table reference
     */
    public Subsamples() {
        this(DSL.name("subsamples"), null);
    }

    public <O extends Record> Subsamples(Table<O> path, ForeignKey<O, SubsamplesRecord> childPath, InverseForeignKey<O, SubsamplesRecord> parentPath) {
        super(path, childPath, parentPath, SUBSAMPLES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SubsamplesPath extends Subsamples implements Path<SubsamplesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SubsamplesPath(Table<O> path, ForeignKey<O, SubsamplesRecord> childPath, InverseForeignKey<O, SubsamplesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SubsamplesPath(Name alias, Table<SubsamplesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SubsamplesPath as(String alias) {
            return new SubsamplesPath(DSL.name(alias), this);
        }

        @Override
        public SubsamplesPath as(Name alias) {
            return new SubsamplesPath(alias, this);
        }

        @Override
        public SubsamplesPath as(Table<?> alias) {
            return new SubsamplesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SUBSAMPLES_GENOTYPE_ID, Indexes.SUBSAMPLES_OUTBREAK_ID);
    }

    @Override
    public Identity<SubsamplesRecord, Integer> getIdentity() {
        return (Identity<SubsamplesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubsamplesRecord> getPrimaryKey() {
        return Keys.KEY_SUBSAMPLES_PRIMARY;
    }

    @Override
    public List<ForeignKey<SubsamplesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUBSAMPLES_IBFK_1, Keys.SUBSAMPLES_IBFK_2);
    }

    private transient SsrGenotypesPath _ssrGenotypes;

    /**
     * Get the implicit join path to the <code>fab.ssr_genotypes</code> table.
     */
    public SsrGenotypesPath ssrGenotypes() {
        if (_ssrGenotypes == null)
            _ssrGenotypes = new SsrGenotypesPath(this, Keys.SUBSAMPLES_IBFK_1, null);

        return _ssrGenotypes;
    }

    private transient OutbreaksPath _outbreaks;

    /**
     * Get the implicit join path to the <code>fab.outbreaks</code> table.
     */
    public OutbreaksPath outbreaks() {
        if (_outbreaks == null)
            _outbreaks = new OutbreaksPath(this, Keys.SUBSAMPLES_IBFK_2, null);

        return _outbreaks;
    }

    @Override
    public Subsamples as(String alias) {
        return new Subsamples(DSL.name(alias), this);
    }

    @Override
    public Subsamples as(Name alias) {
        return new Subsamples(alias, this);
    }

    @Override
    public Subsamples as(Table<?> alias) {
        return new Subsamples(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subsamples rename(String name) {
        return new Subsamples(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subsamples rename(Name name) {
        return new Subsamples(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subsamples rename(Table<?> name) {
        return new Subsamples(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subsamples where(Condition condition) {
        return new Subsamples(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subsamples where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subsamples where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subsamples where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subsamples where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subsamples where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subsamples where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subsamples where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subsamples whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subsamples whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
