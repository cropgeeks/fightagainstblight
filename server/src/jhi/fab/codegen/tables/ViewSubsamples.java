/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.time.LocalDate;
import java.util.Collection;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.tables.records.ViewSubsamplesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViewSubsamples extends TableImpl<ViewSubsamplesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.view_subsamples</code>
     */
    public static final ViewSubsamples VIEW_SUBSAMPLES = new ViewSubsamples();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewSubsamplesRecord> getRecordType() {
        return ViewSubsamplesRecord.class;
    }

    /**
     * The column <code>fab.view_subsamples.subsample_id</code>.
     */
    public final TableField<ViewSubsamplesRecord, Integer> SUBSAMPLE_ID = createField(DSL.name("subsample_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>fab.view_subsamples.subsample_code</code>.
     */
    public final TableField<ViewSubsamplesRecord, String> SUBSAMPLE_CODE = createField(DSL.name("subsample_code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>fab.view_subsamples.outbreak_id</code>.
     */
    public final TableField<ViewSubsamplesRecord, Integer> OUTBREAK_ID = createField(DSL.name("outbreak_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fab.view_subsamples.genotype_id</code>.
     */
    public final TableField<ViewSubsamplesRecord, Integer> GENOTYPE_ID = createField(DSL.name("genotype_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.view_subsamples.material</code>.
     */
    public final TableField<ViewSubsamplesRecord, String> MATERIAL = createField(DSL.name("material"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_subsamples.date_genotyped</code>.
     */
    public final TableField<ViewSubsamplesRecord, LocalDate> DATE_GENOTYPED = createField(DSL.name("date_genotyped"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fab.view_subsamples.user_comments</code>.
     */
    public final TableField<ViewSubsamplesRecord, String> USER_COMMENTS = createField(DSL.name("user_comments"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_subsamples.admin_comments</code>.
     */
    public final TableField<ViewSubsamplesRecord, String> ADMIN_COMMENTS = createField(DSL.name("admin_comments"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_subsamples.variety_name</code>.
     */
    public final TableField<ViewSubsamplesRecord, String> VARIETY_NAME = createField(DSL.name("variety_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_subsamples.variety_id</code>.
     */
    public final TableField<ViewSubsamplesRecord, Integer> VARIETY_ID = createField(DSL.name("variety_id"), SQLDataType.INTEGER, this, "");

    private ViewSubsamples(Name alias, Table<ViewSubsamplesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ViewSubsamples(Name alias, Table<ViewSubsamplesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view `view_subsamples` as select `fab`.`subsamples`.`subsample_id` AS `subsample_id`,`fab`.`subsamples`.`subsample_code` AS `subsample_code`,`fab`.`subsamples`.`outbreak_id` AS `outbreak_id`,`fab`.`subsamples`.`genotype_id` AS `genotype_id`,`fab`.`subsamples`.`material` AS `material`,`fab`.`subsamples`.`date_genotyped` AS `date_genotyped`,`fab`.`subsamples`.`user_comments` AS `user_comments`,`fab`.`subsamples`.`admin_comments` AS `admin_comments`,`fab`.`varieties`.`variety_name` AS `variety_name`,`fab`.`varieties`.`variety_id` AS `variety_id` from (`fab`.`subsamples` left join `fab`.`varieties` on((`fab`.`subsamples`.`variety_id` = `fab`.`varieties`.`variety_id`)))"), where);
    }

    /**
     * Create an aliased <code>fab.view_subsamples</code> table reference
     */
    public ViewSubsamples(String alias) {
        this(DSL.name(alias), VIEW_SUBSAMPLES);
    }

    /**
     * Create an aliased <code>fab.view_subsamples</code> table reference
     */
    public ViewSubsamples(Name alias) {
        this(alias, VIEW_SUBSAMPLES);
    }

    /**
     * Create a <code>fab.view_subsamples</code> table reference
     */
    public ViewSubsamples() {
        this(DSL.name("view_subsamples"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public ViewSubsamples as(String alias) {
        return new ViewSubsamples(DSL.name(alias), this);
    }

    @Override
    public ViewSubsamples as(Name alias) {
        return new ViewSubsamples(alias, this);
    }

    @Override
    public ViewSubsamples as(Table<?> alias) {
        return new ViewSubsamples(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewSubsamples rename(String name) {
        return new ViewSubsamples(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewSubsamples rename(Name name) {
        return new ViewSubsamples(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewSubsamples rename(Table<?> name) {
        return new ViewSubsamples(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewSubsamples where(Condition condition) {
        return new ViewSubsamples(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewSubsamples where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewSubsamples where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewSubsamples where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewSubsamples where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewSubsamples where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewSubsamples where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewSubsamples where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewSubsamples whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewSubsamples whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
