/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.time.LocalDate;
import java.util.Collection;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.enums.ViewOutbreaksHost;
import jhi.fab.codegen.enums.ViewOutbreaksStatus;
import jhi.fab.codegen.tables.records.ViewOutbreaksRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViewOutbreaks extends TableImpl<ViewOutbreaksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.view_outbreaks</code>
     */
    public static final ViewOutbreaks VIEW_OUTBREAKS = new ViewOutbreaks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOutbreaksRecord> getRecordType() {
        return ViewOutbreaksRecord.class;
    }

    /**
     * The column <code>fab.view_outbreaks.outbreak_id</code>.
     */
    public final TableField<ViewOutbreaksRecord, Integer> OUTBREAK_ID = createField(DSL.name("outbreak_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>fab.view_outbreaks.outbreak_code</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> OUTBREAK_CODE = createField(DSL.name("outbreak_code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>fab.view_outbreaks.postcode</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> POSTCODE = createField(DSL.name("postcode"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>fab.view_outbreaks.outcode</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> OUTCODE = createField(DSL.name("outcode"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.country</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.itl_nuts</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> ITL_NUTS = createField(DSL.name("itl_nuts"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.date_received</code>.
     */
    public final TableField<ViewOutbreaksRecord, LocalDate> DATE_RECEIVED = createField(DSL.name("date_received"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fab.view_outbreaks.date_submitted</code>.
     */
    public final TableField<ViewOutbreaksRecord, LocalDate> DATE_SUBMITTED = createField(DSL.name("date_submitted"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fab.view_outbreaks.real_latitude</code>.
     */
    public final TableField<ViewOutbreaksRecord, Double> REAL_LATITUDE = createField(DSL.name("real_latitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.view_outbreaks.real_longitude</code>.
     */
    public final TableField<ViewOutbreaksRecord, Double> REAL_LONGITUDE = createField(DSL.name("real_longitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.view_outbreaks.view_latitude</code>.
     */
    public final TableField<ViewOutbreaksRecord, Double> VIEW_LATITUDE = createField(DSL.name("view_latitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.view_outbreaks.view_longitude</code>.
     */
    public final TableField<ViewOutbreaksRecord, Double> VIEW_LONGITUDE = createField(DSL.name("view_longitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.view_outbreaks.user_comments</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> USER_COMMENTS = createField(DSL.name("user_comments"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.admin_comments</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> ADMIN_COMMENTS = createField(DSL.name("admin_comments"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.status</code>.
     */
    public final TableField<ViewOutbreaksRecord, ViewOutbreaksStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(9).defaultValue(DSL.inline("pending", SQLDataType.VARCHAR)).asEnumDataType(ViewOutbreaksStatus.class), this, "");

    /**
     * The column <code>fab.view_outbreaks.host</code>.
     */
    public final TableField<ViewOutbreaksRecord, ViewOutbreaksHost> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(6).defaultValue(DSL.inline("potato", SQLDataType.VARCHAR)).asEnumDataType(ViewOutbreaksHost.class), this, "");

    /**
     * The column <code>fab.view_outbreaks.is_public</code>.
     */
    public final TableField<ViewOutbreaksRecord, Boolean> IS_PUBLIC = createField(DSL.name("is_public"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>fab.view_outbreaks.severity_id</code>.
     */
    public final TableField<ViewOutbreaksRecord, Integer> SEVERITY_ID = createField(DSL.name("severity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.view_outbreaks.severity_name</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> SEVERITY_NAME = createField(DSL.name("severity_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.severity_other</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> SEVERITY_OTHER = createField(DSL.name("severity_other"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.source_id</code>.
     */
    public final TableField<ViewOutbreaksRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>fab.view_outbreaks.source_name</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.source_other</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> SOURCE_OTHER = createField(DSL.name("source_other"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.user_id</code>.
     */
    public final TableField<ViewOutbreaksRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>fab.view_outbreaks.is_admin</code>.
     */
    public final TableField<ViewOutbreaksRecord, Boolean> IS_ADMIN = createField(DSL.name("is_admin"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>fab.view_outbreaks.user_email</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> USER_EMAIL = createField(DSL.name("user_email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.user_name</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_outbreaks.reported_variety_id</code>.
     */
    public final TableField<ViewOutbreaksRecord, Integer> REPORTED_VARIETY_ID = createField(DSL.name("reported_variety_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.view_outbreaks.reported_variety_name</code>.
     */
    public final TableField<ViewOutbreaksRecord, String> REPORTED_VARIETY_NAME = createField(DSL.name("reported_variety_name"), SQLDataType.VARCHAR(255), this, "");

    private ViewOutbreaks(Name alias, Table<ViewOutbreaksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ViewOutbreaks(Name alias, Table<ViewOutbreaksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view `view_outbreaks` as select `fab`.`outbreaks`.`outbreak_id` AS `outbreak_id`,`fab`.`outbreaks`.`outbreak_code` AS `outbreak_code`,`fab`.`outbreaks`.`postcode` AS `postcode`,`fab`.`outbreaks`.`outcode` AS `outcode`,`fab`.`outbreaks`.`country` AS `country`,`fab`.`outbreaks`.`itl_nuts` AS `itl_nuts`,`fab`.`outbreaks`.`date_received` AS `date_received`,`fab`.`outbreaks`.`date_submitted` AS `date_submitted`,`fab`.`outbreaks`.`real_latitude` AS `real_latitude`,`fab`.`outbreaks`.`real_longitude` AS `real_longitude`,`fab`.`outbreaks`.`view_latitude` AS `view_latitude`,`fab`.`outbreaks`.`view_longitude` AS `view_longitude`,`fab`.`outbreaks`.`user_comments` AS `user_comments`,`fab`.`outbreaks`.`admin_comments` AS `admin_comments`,`fab`.`outbreaks`.`status` AS `status`,`fab`.`outbreaks`.`host` AS `host`,`fab`.`outbreaks`.`is_public` AS `is_public`,`fab`.`severities`.`severity_id` AS `severity_id`,`fab`.`severities`.`severity_name` AS `severity_name`,`fab`.`outbreaks`.`severity_other` AS `severity_other`,`fab`.`sources`.`source_id` AS `source_id`,`fab`.`sources`.`source_name` AS `source_name`,`fab`.`outbreaks`.`source_other` AS `source_other`,`fab`.`users`.`user_id` AS `user_id`,`fab`.`users`.`is_admin` AS `is_admin`,`fab`.`users`.`email` AS `user_email`,`fab`.`users`.`user_name` AS `user_name`,`fab`.`varieties`.`variety_id` AS `reported_variety_id`,`fab`.`varieties`.`variety_name` AS `reported_variety_name` from ((((`fab`.`outbreaks` left join `fab`.`users` on((`fab`.`users`.`user_id` = `fab`.`outbreaks`.`user_id`))) left join `fab`.`severities` on((`fab`.`severities`.`severity_id` = `fab`.`outbreaks`.`severity_id`))) left join `fab`.`sources` on((`fab`.`sources`.`source_id` = `fab`.`outbreaks`.`source_id`))) left join `fab`.`varieties` on((`fab`.`outbreaks`.`reported_variety_id` = `fab`.`varieties`.`variety_id`)))"), where);
    }

    /**
     * Create an aliased <code>fab.view_outbreaks</code> table reference
     */
    public ViewOutbreaks(String alias) {
        this(DSL.name(alias), VIEW_OUTBREAKS);
    }

    /**
     * Create an aliased <code>fab.view_outbreaks</code> table reference
     */
    public ViewOutbreaks(Name alias) {
        this(alias, VIEW_OUTBREAKS);
    }

    /**
     * Create a <code>fab.view_outbreaks</code> table reference
     */
    public ViewOutbreaks() {
        this(DSL.name("view_outbreaks"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public ViewOutbreaks as(String alias) {
        return new ViewOutbreaks(DSL.name(alias), this);
    }

    @Override
    public ViewOutbreaks as(Name alias) {
        return new ViewOutbreaks(alias, this);
    }

    @Override
    public ViewOutbreaks as(Table<?> alias) {
        return new ViewOutbreaks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOutbreaks rename(String name) {
        return new ViewOutbreaks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOutbreaks rename(Name name) {
        return new ViewOutbreaks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOutbreaks rename(Table<?> name) {
        return new ViewOutbreaks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewOutbreaks where(Condition condition) {
        return new ViewOutbreaks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewOutbreaks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewOutbreaks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewOutbreaks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewOutbreaks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewOutbreaks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewOutbreaks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewOutbreaks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewOutbreaks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewOutbreaks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
