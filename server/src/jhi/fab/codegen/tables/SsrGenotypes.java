/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.util.Collection;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.tables.Subsamples.SubsamplesPath;
import jhi.fab.codegen.tables.records.SsrGenotypesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SsrGenotypes extends TableImpl<SsrGenotypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.ssr_genotypes</code>
     */
    public static final SsrGenotypes SSR_GENOTYPES = new SsrGenotypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SsrGenotypesRecord> getRecordType() {
        return SsrGenotypesRecord.class;
    }

    /**
     * The column <code>fab.ssr_genotypes.genotype_id</code>.
     */
    public final TableField<SsrGenotypesRecord, Integer> GENOTYPE_ID = createField(DSL.name("genotype_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fab.ssr_genotypes.genotype_name</code>.
     */
    public final TableField<SsrGenotypesRecord, String> GENOTYPE_NAME = createField(DSL.name("genotype_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private SsrGenotypes(Name alias, Table<SsrGenotypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SsrGenotypes(Name alias, Table<SsrGenotypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.ssr_genotypes</code> table reference
     */
    public SsrGenotypes(String alias) {
        this(DSL.name(alias), SSR_GENOTYPES);
    }

    /**
     * Create an aliased <code>fab.ssr_genotypes</code> table reference
     */
    public SsrGenotypes(Name alias) {
        this(alias, SSR_GENOTYPES);
    }

    /**
     * Create a <code>fab.ssr_genotypes</code> table reference
     */
    public SsrGenotypes() {
        this(DSL.name("ssr_genotypes"), null);
    }

    public <O extends Record> SsrGenotypes(Table<O> path, ForeignKey<O, SsrGenotypesRecord> childPath, InverseForeignKey<O, SsrGenotypesRecord> parentPath) {
        super(path, childPath, parentPath, SSR_GENOTYPES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SsrGenotypesPath extends SsrGenotypes implements Path<SsrGenotypesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SsrGenotypesPath(Table<O> path, ForeignKey<O, SsrGenotypesRecord> childPath, InverseForeignKey<O, SsrGenotypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SsrGenotypesPath(Name alias, Table<SsrGenotypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SsrGenotypesPath as(String alias) {
            return new SsrGenotypesPath(DSL.name(alias), this);
        }

        @Override
        public SsrGenotypesPath as(Name alias) {
            return new SsrGenotypesPath(alias, this);
        }

        @Override
        public SsrGenotypesPath as(Table<?> alias) {
            return new SsrGenotypesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public Identity<SsrGenotypesRecord, Integer> getIdentity() {
        return (Identity<SsrGenotypesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SsrGenotypesRecord> getPrimaryKey() {
        return Keys.KEY_SSR_GENOTYPES_PRIMARY;
    }

    private transient SubsamplesPath _subsamples;

    /**
     * Get the implicit to-many join path to the <code>fab.subsamples</code>
     * table
     */
    public SubsamplesPath subsamples() {
        if (_subsamples == null)
            _subsamples = new SubsamplesPath(this, null, Keys.GENOTYPES.getInverseKey());

        return _subsamples;
    }

    @Override
    public SsrGenotypes as(String alias) {
        return new SsrGenotypes(DSL.name(alias), this);
    }

    @Override
    public SsrGenotypes as(Name alias) {
        return new SsrGenotypes(alias, this);
    }

    @Override
    public SsrGenotypes as(Table<?> alias) {
        return new SsrGenotypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SsrGenotypes rename(String name) {
        return new SsrGenotypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SsrGenotypes rename(Name name) {
        return new SsrGenotypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SsrGenotypes rename(Table<?> name) {
        return new SsrGenotypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SsrGenotypes where(Condition condition) {
        return new SsrGenotypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SsrGenotypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SsrGenotypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SsrGenotypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SsrGenotypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SsrGenotypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SsrGenotypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SsrGenotypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SsrGenotypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SsrGenotypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
