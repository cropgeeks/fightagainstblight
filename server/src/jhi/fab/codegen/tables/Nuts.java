/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.tables.Countries.CountriesPath;
import jhi.fab.codegen.tables.Outbreaks.OutbreaksPath;
import jhi.fab.codegen.tables.records.NutsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Nuts extends TableImpl<NutsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.nuts</code>
     */
    public static final Nuts NUTS = new Nuts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NutsRecord> getRecordType() {
        return NutsRecord.class;
    }

    /**
     * The column <code>fab.nuts.nuts_id</code>.
     */
    public final TableField<NutsRecord, Integer> NUTS_ID = createField(DSL.name("nuts_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fab.nuts.name</code>.
     */
    public final TableField<NutsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.nuts.country_id</code>.
     */
    public final TableField<NutsRecord, Integer> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.INTEGER, this, "");

    private Nuts(Name alias, Table<NutsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Nuts(Name alias, Table<NutsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.nuts</code> table reference
     */
    public Nuts(String alias) {
        this(DSL.name(alias), NUTS);
    }

    /**
     * Create an aliased <code>fab.nuts</code> table reference
     */
    public Nuts(Name alias) {
        this(alias, NUTS);
    }

    /**
     * Create a <code>fab.nuts</code> table reference
     */
    public Nuts() {
        this(DSL.name("nuts"), null);
    }

    public <O extends Record> Nuts(Table<O> path, ForeignKey<O, NutsRecord> childPath, InverseForeignKey<O, NutsRecord> parentPath) {
        super(path, childPath, parentPath, NUTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NutsPath extends Nuts implements Path<NutsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NutsPath(Table<O> path, ForeignKey<O, NutsRecord> childPath, InverseForeignKey<O, NutsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NutsPath(Name alias, Table<NutsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NutsPath as(String alias) {
            return new NutsPath(DSL.name(alias), this);
        }

        @Override
        public NutsPath as(Name alias) {
            return new NutsPath(alias, this);
        }

        @Override
        public NutsPath as(Table<?> alias) {
            return new NutsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public UniqueKey<NutsRecord> getPrimaryKey() {
        return Keys.KEY_NUTS_PRIMARY;
    }

    @Override
    public List<ForeignKey<NutsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COUNTRY);
    }

    private transient CountriesPath _countries;

    /**
     * Get the implicit join path to the <code>fab.countries</code> table.
     */
    public CountriesPath countries() {
        if (_countries == null)
            _countries = new CountriesPath(this, Keys.COUNTRY, null);

        return _countries;
    }

    private transient OutbreaksPath _outbreaks;

    /**
     * Get the implicit to-many join path to the <code>fab.outbreaks</code>
     * table
     */
    public OutbreaksPath outbreaks() {
        if (_outbreaks == null)
            _outbreaks = new OutbreaksPath(this, null, Keys.NUTS.getInverseKey());

        return _outbreaks;
    }

    @Override
    public Nuts as(String alias) {
        return new Nuts(DSL.name(alias), this);
    }

    @Override
    public Nuts as(Name alias) {
        return new Nuts(alias, this);
    }

    @Override
    public Nuts as(Table<?> alias) {
        return new Nuts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nuts rename(String name) {
        return new Nuts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nuts rename(Name name) {
        return new Nuts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nuts rename(Table<?> name) {
        return new Nuts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nuts where(Condition condition) {
        return new Nuts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nuts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nuts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nuts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nuts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nuts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nuts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nuts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nuts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nuts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
