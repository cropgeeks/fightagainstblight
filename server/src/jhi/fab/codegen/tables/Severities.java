/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.util.Collection;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.Keys;
import jhi.fab.codegen.tables.Outbreaks.OutbreaksPath;
import jhi.fab.codegen.tables.records.SeveritiesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Severities extends TableImpl<SeveritiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.severities</code>
     */
    public static final Severities SEVERITIES = new Severities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeveritiesRecord> getRecordType() {
        return SeveritiesRecord.class;
    }

    /**
     * The column <code>fab.severities.severity_id</code>.
     */
    public final TableField<SeveritiesRecord, Integer> SEVERITY_ID = createField(DSL.name("severity_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fab.severities.severity_name</code>.
     */
    public final TableField<SeveritiesRecord, String> SEVERITY_NAME = createField(DSL.name("severity_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Severities(Name alias, Table<SeveritiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Severities(Name alias, Table<SeveritiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fab.severities</code> table reference
     */
    public Severities(String alias) {
        this(DSL.name(alias), SEVERITIES);
    }

    /**
     * Create an aliased <code>fab.severities</code> table reference
     */
    public Severities(Name alias) {
        this(alias, SEVERITIES);
    }

    /**
     * Create a <code>fab.severities</code> table reference
     */
    public Severities() {
        this(DSL.name("severities"), null);
    }

    public <O extends Record> Severities(Table<O> path, ForeignKey<O, SeveritiesRecord> childPath, InverseForeignKey<O, SeveritiesRecord> parentPath) {
        super(path, childPath, parentPath, SEVERITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SeveritiesPath extends Severities implements Path<SeveritiesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SeveritiesPath(Table<O> path, ForeignKey<O, SeveritiesRecord> childPath, InverseForeignKey<O, SeveritiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SeveritiesPath(Name alias, Table<SeveritiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SeveritiesPath as(String alias) {
            return new SeveritiesPath(DSL.name(alias), this);
        }

        @Override
        public SeveritiesPath as(Name alias) {
            return new SeveritiesPath(alias, this);
        }

        @Override
        public SeveritiesPath as(Table<?> alias) {
            return new SeveritiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public Identity<SeveritiesRecord, Integer> getIdentity() {
        return (Identity<SeveritiesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SeveritiesRecord> getPrimaryKey() {
        return Keys.KEY_SEVERITIES_PRIMARY;
    }

    private transient OutbreaksPath _outbreaks;

    /**
     * Get the implicit to-many join path to the <code>fab.outbreaks</code>
     * table
     */
    public OutbreaksPath outbreaks() {
        if (_outbreaks == null)
            _outbreaks = new OutbreaksPath(this, null, Keys.OUTBREAKS_IBFK_2.getInverseKey());

        return _outbreaks;
    }

    @Override
    public Severities as(String alias) {
        return new Severities(DSL.name(alias), this);
    }

    @Override
    public Severities as(Name alias) {
        return new Severities(alias, this);
    }

    @Override
    public Severities as(Table<?> alias) {
        return new Severities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Severities rename(String name) {
        return new Severities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Severities rename(Name name) {
        return new Severities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Severities rename(Table<?> name) {
        return new Severities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Severities where(Condition condition) {
        return new Severities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Severities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Severities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Severities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Severities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Severities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Severities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Severities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Severities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Severities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
