/*
 * This file is generated by jOOQ.
 */
package jhi.fab.codegen.tables;


import java.time.LocalDate;
import java.util.Collection;

import jhi.fab.codegen.Fab;
import jhi.fab.codegen.enums.ViewEuroblightHost;
import jhi.fab.codegen.enums.ViewEuroblightMatingType;
import jhi.fab.codegen.enums.ViewEuroblightStatus;
import jhi.fab.codegen.tables.records.ViewEuroblightRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViewEuroblight extends TableImpl<ViewEuroblightRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fab.view_euroblight</code>
     */
    public static final ViewEuroblight VIEW_EUROBLIGHT = new ViewEuroblight();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewEuroblightRecord> getRecordType() {
        return ViewEuroblightRecord.class;
    }

    /**
     * The column <code>fab.view_euroblight.subsample_code</code>.
     */
    public final TableField<ViewEuroblightRecord, String> SUBSAMPLE_CODE = createField(DSL.name("subsample_code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>fab.view_euroblight.material</code>.
     */
    public final TableField<ViewEuroblightRecord, String> MATERIAL = createField(DSL.name("material"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.mycelia_pellet</code>.
     */
    public final TableField<ViewEuroblightRecord, Boolean> MYCELIA_PELLET = createField(DSL.name("mycelia_pellet"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>fab.view_euroblight.culture_slope</code>.
     */
    public final TableField<ViewEuroblightRecord, Boolean> CULTURE_SLOPE = createField(DSL.name("culture_slope"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>fab.view_euroblight.mating_type</code>.
     */
    public final TableField<ViewEuroblightRecord, ViewEuroblightMatingType> MATING_TYPE = createField(DSL.name("mating_type"), SQLDataType.VARCHAR(2).asEnumDataType(ViewEuroblightMatingType.class), this, "");

    /**
     * The column <code>fab.view_euroblight.outbreak_code</code>.
     */
    public final TableField<ViewEuroblightRecord, String> OUTBREAK_CODE = createField(DSL.name("outbreak_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.host</code>.
     */
    public final TableField<ViewEuroblightRecord, ViewEuroblightHost> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(6).defaultValue(DSL.inline("potato", SQLDataType.VARCHAR)).asEnumDataType(ViewEuroblightHost.class), this, "");

    /**
     * The column <code>fab.view_euroblight.user_name</code>.
     */
    public final TableField<ViewEuroblightRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.variety_name</code>.
     */
    public final TableField<ViewEuroblightRecord, String> VARIETY_NAME = createField(DSL.name("variety_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.country</code>.
     */
    public final TableField<ViewEuroblightRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.itl_nuts</code>.
     */
    public final TableField<ViewEuroblightRecord, String> ITL_NUTS = createField(DSL.name("itl_nuts"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.outcode</code>.
     */
    public final TableField<ViewEuroblightRecord, String> OUTCODE = createField(DSL.name("outcode"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.view_latitude</code>.
     */
    public final TableField<ViewEuroblightRecord, Double> VIEW_LATITUDE = createField(DSL.name("view_latitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.view_euroblight.view_longitude</code>.
     */
    public final TableField<ViewEuroblightRecord, Double> VIEW_LONGITUDE = createField(DSL.name("view_longitude"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>fab.view_euroblight.source_name</code>.
     */
    public final TableField<ViewEuroblightRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.severity_name</code>.
     */
    public final TableField<ViewEuroblightRecord, String> SEVERITY_NAME = createField(DSL.name("severity_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.genotype_name</code>.
     */
    public final TableField<ViewEuroblightRecord, String> GENOTYPE_NAME = createField(DSL.name("genotype_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fab.view_euroblight.source_id</code>.
     */
    public final TableField<ViewEuroblightRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>fab.view_euroblight.severity_id</code>.
     */
    public final TableField<ViewEuroblightRecord, Integer> SEVERITY_ID = createField(DSL.name("severity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.view_euroblight.variety_id</code>.
     */
    public final TableField<ViewEuroblightRecord, Integer> VARIETY_ID = createField(DSL.name("variety_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fab.view_euroblight.user_id</code>.
     */
    public final TableField<ViewEuroblightRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>fab.view_euroblight.status</code>.
     */
    public final TableField<ViewEuroblightRecord, ViewEuroblightStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(9).defaultValue(DSL.inline("pending", SQLDataType.VARCHAR)).asEnumDataType(ViewEuroblightStatus.class), this, "");

    /**
     * The column <code>fab.view_euroblight.date_submitted</code>.
     */
    public final TableField<ViewEuroblightRecord, LocalDate> DATE_SUBMITTED = createField(DSL.name("date_submitted"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fab.view_euroblight.date_genotyped</code>.
     */
    public final TableField<ViewEuroblightRecord, LocalDate> DATE_GENOTYPED = createField(DSL.name("date_genotyped"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fab.view_euroblight.admin_comments</code>.
     */
    public final TableField<ViewEuroblightRecord, String> ADMIN_COMMENTS = createField(DSL.name("admin_comments"), SQLDataType.VARCHAR(255), this, "");

    private ViewEuroblight(Name alias, Table<ViewEuroblightRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ViewEuroblight(Name alias, Table<ViewEuroblightRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view `view_euroblight` as select `fab`.`subsamples`.`subsample_code` AS `subsample_code`,`fab`.`subsamples`.`material` AS `material`,`fab`.`subsamples`.`mycelia_pellet` AS `mycelia_pellet`,`fab`.`subsamples`.`culture_slope` AS `culture_slope`,`fab`.`subsamples`.`mating_type` AS `mating_type`,`fab`.`outbreaks`.`outbreak_code` AS `outbreak_code`,`fab`.`outbreaks`.`host` AS `host`,`fab`.`users`.`user_name` AS `user_name`,`fab`.`varieties`.`variety_name` AS `variety_name`,`fab`.`outbreaks`.`country` AS `country`,`fab`.`outbreaks`.`itl_nuts` AS `itl_nuts`,`fab`.`outbreaks`.`outcode` AS `outcode`,`fab`.`outbreaks`.`view_latitude` AS `view_latitude`,`fab`.`outbreaks`.`view_longitude` AS `view_longitude`,`fab`.`sources`.`source_name` AS `source_name`,`fab`.`severities`.`severity_name` AS `severity_name`,`fab`.`ssr_genotypes`.`genotype_name` AS `genotype_name`,`fab`.`sources`.`source_id` AS `source_id`,`fab`.`severities`.`severity_id` AS `severity_id`,`fab`.`varieties`.`variety_id` AS `variety_id`,`fab`.`users`.`user_id` AS `user_id`,`fab`.`outbreaks`.`status` AS `status`,`fab`.`outbreaks`.`date_submitted` AS `date_submitted`,`fab`.`subsamples`.`date_genotyped` AS `date_genotyped`,`fab`.`subsamples`.`admin_comments` AS `admin_comments` from ((((((`fab`.`subsamples` left join `fab`.`outbreaks` on((`fab`.`subsamples`.`outbreak_id` = `fab`.`outbreaks`.`outbreak_id`))) left join `fab`.`users` on((`fab`.`outbreaks`.`user_id` = `fab`.`users`.`user_id`))) left join `fab`.`varieties` on((`fab`.`subsamples`.`variety_id` = `fab`.`varieties`.`variety_id`))) left join `fab`.`sources` on((`fab`.`outbreaks`.`source_id` = `fab`.`sources`.`source_id`))) left join `fab`.`severities` on((`fab`.`outbreaks`.`severity_id` = `fab`.`severities`.`severity_id`))) left join `fab`.`ssr_genotypes` on((`fab`.`subsamples`.`genotype_id` = `fab`.`ssr_genotypes`.`genotype_id`)))"), where);
    }

    /**
     * Create an aliased <code>fab.view_euroblight</code> table reference
     */
    public ViewEuroblight(String alias) {
        this(DSL.name(alias), VIEW_EUROBLIGHT);
    }

    /**
     * Create an aliased <code>fab.view_euroblight</code> table reference
     */
    public ViewEuroblight(Name alias) {
        this(alias, VIEW_EUROBLIGHT);
    }

    /**
     * Create a <code>fab.view_euroblight</code> table reference
     */
    public ViewEuroblight() {
        this(DSL.name("view_euroblight"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fab.FAB;
    }

    @Override
    public ViewEuroblight as(String alias) {
        return new ViewEuroblight(DSL.name(alias), this);
    }

    @Override
    public ViewEuroblight as(Name alias) {
        return new ViewEuroblight(alias, this);
    }

    @Override
    public ViewEuroblight as(Table<?> alias) {
        return new ViewEuroblight(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewEuroblight rename(String name) {
        return new ViewEuroblight(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewEuroblight rename(Name name) {
        return new ViewEuroblight(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewEuroblight rename(Table<?> name) {
        return new ViewEuroblight(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewEuroblight where(Condition condition) {
        return new ViewEuroblight(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewEuroblight where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewEuroblight where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewEuroblight where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewEuroblight where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewEuroblight where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewEuroblight where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViewEuroblight where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewEuroblight whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViewEuroblight whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
